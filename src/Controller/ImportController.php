<?php

namespace App\Controller;

use App\Entity\Fournisseur;
use App\Entity\Pays;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Egyg33k\CsvBundle\Services\Reader;
use Symfony\Component\Routing\Annotation\Route;
use App\Repository\FournisseurRepository;
use App\Repository\PaysRepository;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;

class ImportController extends AbstractController
{
    /**
     * @Route("/", name="blog")
     */
    public function index()
    {
        return $this->render('blog/index.html.twig', [
            'controller_name' => 'ImportController',
        ]);
    }


    /**
     * @Route("/home ", name="home")
     */
    public function home(){
        return $this->render('blog/home.html.twig');
    }

    /**
     * @Route("/importer ", name="import-csv")
     */
    public function import(Request $request, FournisseurRepository $fournisseurRepository,PaysRepository $paysRepository){
    
    
        $em= $this->getDoctrine()->getManager();
        # Reader
        if($request->getMethod()=='POST') {

            $file = $request->files->get('import-csv'); //recuperation du fichier csv
            
            $fileName = $this->generateUniqueFileName().'.csv'; // genere un nom unique au fichier ex: d3055f5094baafdc80c6f82f6102e2f7.csv . on appelle ici la fonction generateUniqueFileName qui
                                                                // est tout en bas
            
            // Move the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('csv_directory'), //deplacement du fichier dans public/csv
                $fileName
            );
          //  $reader = $this->container->get('egyg33k.csv.reader');

            $csv = Reader::createFromPath($this->getParameter('csv_directory').'/'.$fileName); //charge le fichier depuis son répertoire
           // dd($csv);
            foreach ($csv as $record) {
             
                $fournisseur = new Fournisseur(); // initiation de la classe et remplissage ou mappage en accordance des champs dans la DB
                $fournisseur
                    ->setNom($record[0])
                    ->setAdresse($record[1])
                    ->setTelephone($record[2])
                    ->setIdentifiant($record[3])
                    
                    ;
                $verif = $fournisseurRepository->findOneBy(array('telephone' => $record[2],'identifiant' => $record[3]));    // controle sur l unicité en fonction
                                                                                                                            // du numero telephone ou de l'identifiant              
              
                if($verif){
                    return new Response(
                        '<html><body> il y a un ou des identifiant ou un telephone  deja existants dans la base : </body></html>'
                    );
                }else{ 
                    
                    $em->persist($fournisseur);

                   
                    $pays =$paysRepository->findOneBy([ // cherche si le pays du fournisseur existe deja dans la base 
                        'nompays' => $record[4]
                    ]);
                  // dd($pays);
                    if (!$pays) {
                        # code...
                        // $pays = new Pays();
                        //  $pays->setNompays($record[4]);
                        
                        // ;
                       // $em->persist($pays);
                       
                         return new Response(
                           '<html><body>il y a un ou des pays non existants dans réseau : '.!$pays.'</body></html>'
                         );
                    }
                    $fournisseur->setPays($pays);
                }
            }
            $em->flush();
            
            unlink($this->getParameter('csv_directory').'/'.$fileName); //surprime le fichier 
          // dd($fournisseur);
          //  return $this->redirectToRoute('/home');
          return new Response(
            '<html><body> insertion ok </body></html>'
        );
        }
        return $this->render('blog/import.html.twig');
    }

    /** 
    * @return string
    */
   private function generateUniqueFileName()
   {
       // md5() reduces the similarity of the file names generated by
       // uniqid(), which is based on timestamps
       return md5(uniqid());
   }

   
    //  /**
    //  * @Route("/exporter ", name="exporter-csv")
    //  */
    // public function export(){
    //     return $this->render('blog/export.html.twig');
    // }
}
